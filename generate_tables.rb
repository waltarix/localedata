# frozen_string_literal: true

require './lib'

ranges = Chars.new.wcwidth9_ranges

code_formatter = ->(char) { format("'\\u{%<code>x}'", code: char.code).rjust(12) }

table_rows = ranges.map do |range|
  min, max = range.minmax.map(&code_formatter)
  width = range.width.to_s.rjust(2)
  "(#{min}, #{max}, #{width}, #{width}),"
end

puts(
  <<~CODE
    // Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT
    // file at the top-level directory of this distribution and at
    // http://rust-lang.org/COPYRIGHT.
    //
    // Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
    // http://www.apache.org/licenses/LICENSE-2.0> or the MIT license
    // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your
    // option. This file may not be copied, modified, or distributed
    // except according to those terms.

    // NOTE: The following code was generated by "scripts/unicode.py", do not edit directly

    #![allow(missing_docs, non_upper_case_globals, non_snake_case)]

    /// The version of [Unicode](http://www.unicode.org/)
    /// that this version of unicode-width is based on.
    pub const UNICODE_VERSION: (u64, u64, u64) = (13, 0, 0);

    pub mod charwidth {
        use core::option::Option::{self, Some, None};
        use core::result::Result::{Ok, Err};

        #[inline]
        fn bsearch_range_value_table(c: char, is_cjk: bool, r: &'static [(char, char, u8, u8)]) -> u8 {
            use core::cmp::Ordering::{Equal, Less, Greater};
            match r.binary_search_by(|&(lo, hi, _, _)| {
                if lo <= c && c <= hi { Equal }
                else if hi < c { Less }
                else { Greater }
            }) {
                Ok(idx) => {
                    let (_, _, r_ncjk, r_cjk) = r[idx];
                    if is_cjk { r_cjk } else { r_ncjk }
                }
                Err(_) => 1
            }
        }

        #[inline]
        pub fn width(c: char, is_cjk: bool) -> Option<usize> {
            match c as usize {
                _c @ 0 => Some(0),          // null is zero width
                cu if cu < 0x20 => None,    // control sequences have no width
                cu if cu < 0x7F => Some(1), // ASCII
                cu if cu < 0xA0 => None,    // more control sequences
                _ => Some(bsearch_range_value_table(c, is_cjk, charwidth_table) as usize)
            }
        }

        // character width table. Based on Markus Kuhn's free wcwidth() implementation,
        //     http://www.cl.cam.ac.uk/~mgk25/ucs/wcwidth.c
        const charwidth_table: &'static [(char, char, u8, u8)] = &[
          #{table_rows.join("\n      ")}
        ];
    }
  CODE
)
